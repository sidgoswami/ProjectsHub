
@{
    ViewData["Title"] = "StoredData";
}

<div class="text-center">
    <h1 class="display-4">Stored Data View</h1>
</div>


<section>
    <div style="display:flex;justify-content:space-evenly;">
        <div>
           <input type="button" value="Refresh Data" id="btnRefreshDb" class="btn btn-success" />  
        </div>
        <div>
             <label for="idLastRefreshed"> Last Refreshed: </label>
            <input id="idLastRefreshed" disabled/>
        </div>
    </div>
</section>

<section>
    <div style="display:flex;justify-content:space-evenly;">
        <div>
            <label for="ddStates">
                States:
            </label>
            <select id="ddStates"  placeholder="Select State" class="form-control"></select>
        </div>
         <div>
            <label for="ddCities">
                Cities:
            </label>
            <select id="ddCities" placeholder="Select City" class="form-control"></select>
        </div>  
             
        <div style="align-self:center;">
            <input type="button" id="btnFetchForSelection" value="Fetch" class="btn btn-success" />
        </div>
    </div>
</section>

<partial name="_AQTablePartialView"/>

<script>
    window.onload = function () {

        const configTable = {
            AQTableBodyId: 'AirQualityIndexTableBody',
            AQTableId: 'AirQualityIndexTable',
            AQTableWrapper: 'AirQualityTableWrapper'
        };

        const objAQTable = new AQTable(configTable);

        const config = {
            AQDropDownStateDefault: '--Select State--',
            AQDropDownCityDefault: '--Select City--',
            AQDbRefreshUrl: '@Url.ActionLink("AirQualityFullDbRefresh", "StoredData")',
            AQFetchUrl: '@Url.ActionLink("FetchAirQuality", "RealTime")',
            AQGetCityForStateUrl: '@Url.ActionLink("GetCityForState", "StoredData")',
            AQLastRefreshUrl: '@Url.ActionLink("GetLastRefreshed", "StoredData")',
            AQGetStatesUrl: '@Url.ActionLink("GetAllStates", "StoredData")',
            AQGetCitiesUrl: '@Url.ActionLink("GetAllCities", "StoredData")',
            AQDbFetchUrl: '@Url.ActionLink("GetAQStoredIndexes", "StoredData")',
            AQTable: objAQTable
        }
        const aq = new AQStoredData(config);
        
        $('#ddStates').change(function(){
            let selectedState = $('#ddStates').val();
            if(selectedState != config.AQDropDownStateDefault)
            {
                aq.refreshCityListByState(selectedState);        
            }
        })

        $('#btnRefreshDb').click(function () {
            aq.refreshAQRecordsInDb();
        });

        $('#btnFetchForSelection').click(function(){
            let selectedState = $('#ddStates').val();
            let selectedCity = $('#ddCities').val();
            if(selectedState == config.AQDropDownStateDefault)
            {
                selectedState = undefined;
            }
            if(selectedCity == config.AQDropDownCityDefault)
            {
                selectedCity = undefined;
            }
            console.log("calling controller")
            aq.fetchAQIndexesFromDb(selectedState, selectedCity);
        });

    };

</script>